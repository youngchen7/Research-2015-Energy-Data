{% block content %}
	<div class="starter-template">
		<h1>Village Lighting Moving Average</h1>
		<!-- TODO: Read data into a multi-dimensional array -->
		<script type="text/javascript">
				// Your beautiful D3 code will go here
				//Initializing window paramters
				var w = window.innerWidth*0.9;
				var h = window.innerHeight*0.8;

				var svg = d3.select("body")
					.append("svg")
					.attr("style", "display: block; margin: auto")
					.attr("width", w)   // <-- Here
					.attr("height", h); // <-- and here!

				//Create scaling for the data
				var xpadding = 0.1;
				var ypadding = 0.15;
				var xScale = d3.time.scale()
					.domain([new Date(1993, 0, 1), Date.now()])
					.range([2*w/15+w*xpadding, w*(1-xpadding)]);
				var yScale = [
					d3.scale.linear()
						.domain([0, 63])
						.range([h/3 - h/3*ypadding, h/3*ypadding]),
					d3.scale.linear()
						.domain([0, 63])
						.range([h*2/3 - h/3*ypadding, h/3+h/3*ypadding]),
					d3.scale.linear()
						.domain([0, 63])
						.range([h - h/3*ypadding, h*2/3+h/3*ypadding])
					];

				//Loading csv values====================================================
				var villages = ["pahari", "parjanpur", "sakalpur"];
				var coordinates = [ [25.267, 82.938], [25.325, 82.898], [25.325, 82.725]];
				var colors = [d3.rgb("coral"), d3.rgb("cornflowerblue"), d3.rgb("mediumseagreen")];
				var dataset = [];
				var dataset_avg = [];
				var data_ready = false;
				var q = queue();

				var loadcsv = function(i, callback){	//Define the loading function
					d3.csv("../Data/" + villages[i] + ".csv", function(d) {
						if(+d.Value==255)	//Preliminary checks for "255" no data value
						return null;			//Discard entries with no data value (255)
						return {
										index: i,																//remember the index
										coordinates: [+d.Latitude, +d.Longitude], // convert to numbers
										value: +d.Value,
										satellite: d.Satellite.substring(0,3), //Parse satellite data
										date: new Date(+d.Satellite.substring(3,7),
																		+d.Satellite.substring(7,9)-1, //Month is 0 indexed
																		+d.Satellite.substring(9,11),
																		+d.Satellite.substring(11,13),
																		+d.Satellite.substring(13,15))
									};
								}, function(error, rows) {
									dataset.push(rows);	//Finished loading, push the rows onto the dataset
									callback(error, rows); //Tell the queue we've finished
					});
				}

				var extractValues = function(dataset, i) {
					return dataset[i].map(function(_, idx){
						return dataset[i][idx]['value'];
					});
				}

				var movingWindowAvg = function (arr, step) {  // Window size = 2 * step + 1
				    return arr.map(function (_, idx) {
				        var wnd = arr.slice(idx - step, idx + step + 1);
				        var result = d3.sum(wnd) / wnd.length; if (isNaN(result)) { result = 0; }
				        return result;
				    });
				};

				var updateScatterPlot = function(error, results) {
					console.log("Plotting points!");
					data_ready = true;
					for(var i = 0; i < villages.length; i++){
						console.log("Sorting " + villages[dataset[i][0].index] + "data!");
						dataset[i].sort(function(a, b){
							return a.date-b.date;
						});
						svg.selectAll("circle")
							.data(dataset[i], function(d) {
								return villages[d.index] + d.satellite + d.date;
							})
							.enter()
							.append("circle")
							.attr("cx", function(d) {
								return xScale(d.date);
							})
							.attr("cy", function(d) {
								return yScale[d.index](d.value);
							})
							.attr("r", 1)
							.attr("fill", function(d) {
								return colors[d.index];
							});
						console.log(villages[dataset[i][0].index] + " plots finished");

						dataset_avg.push(movingWindowAvg(extractValues(dataset,i), 100));

						for(var k = 0; k < dataset_avg[i].length; ++k){
							dataset[i][k]['value_avg'] = dataset_avg[i][k];
						}

						var lineFunc = d3.svg.line()
						  .x(function (d) {
						    return xScale(d.date);
						  })
						  .y(function (d) {
						    return yScale[d.index](d.value_avg);
						  })
						  .interpolate('basis');

						svg.append("svg:path")
						  .attr("d", lineFunc(dataset[i]))
						  .attr("stroke", "blue")
						  .attr("stroke-width", 2)
						  .attr("fill", "none");

					}
				}

				//Queue them up, loading each villages data in parallel
				for(var i = 0; i < villages.length; i++){
					q.defer(loadcsv, i);
				}

				//Drawing scatterplot points
				q.awaitAll(updateScatterPlot);

				//Draw labels
				for(var i = 0; i < villages.length; i++){
					svg.append("text")
						.text(villages[i])
						.attr("x", w/15)
						.attr("y", (i+1)*h/4)
						.attr("fill", colors[i])
				}
				//Draw axises
				svg.append("g")
					.attr("class", "axis")
					.attr("transform", "translate(0," + h*0.95 + ")")
					.call(d3.svg.axis()
						.scale(xScale)
						.orient("bottom"));
				svg.append("g")
						.attr("class", "axis")
						.attr("transform", "translate(" + (2*w/15+w*xpadding) + ",0)")
						.call(d3.svg.axis()
                  .scale(yScale[0])
                  .orient("left")
                  .ticks(5));
				svg.append("g")
						.attr("class", "axis")
						.attr("transform", "translate(" + (2*w/15+w*xpadding) + ",0)")
						.call(d3.svg.axis()
                  .scale(yScale[1])
                  .orient("left")
                  .ticks(5));
				svg.append("g")
						.attr("class", "axis")
						.attr("transform", "translate(" + (2*w/15+w*xpadding) + ",0)")
						.call(d3.svg.axis()
                  .scale(yScale[2])
                  .orient("left")
                  .ticks(5));

		</script>
	</div>
{% endblock %}
