{% block content %}
	<div class="starter-template">
		<h1>Village Lighting Moving Average</h1>
		<!-- TODO: Read data into a multi-dimensional array -->
		<script type="text/javascript">
				// Your beautiful D3 code will go here
				//Initializing window paramters
				var w = window.innerWidth*0.9;
				var h = window.innerHeight*0.6;

				var svg = d3.select("body")
					.append("svg")
					.attr("style", "display: block; margin: auto")
					.attr("width", w)   // <-- Here
					.attr("height", h); // <-- and here!

				//Create scaling for the data
				var padding = 0.1;
				var xScale = d3.time.scale()
					.domain([new Date(1993, 0, 1), Date.now()])
					.range([2*w/15+w*padding, w*(1-padding)]);
				var yScale = d3.scale.linear()
					.domain([0, 63])
					.range([h*(1-padding), h*padding]);

				//Loading csv values====================================================
				var villages = ["pahari", "parjanpur", "sakalpur"];
				var coordinates = [ [25.267, 82.938], [25.325, 82.898], [25.325, 82.725]];
				var colors = [d3.rgb("coral"), d3.rgb("cornflowerblue"), d3.rgb("mediumseagreen")];
				var dataset = [];
				var q = queue();

				var loadcsv = function(i, callback){	//Define the loading function
					d3.csv("../Data/" + villages[i] + ".csv", function(d) {
						if(+d.Value==255)	//Preliminary checks for "255" no data value
						return null;			//Discard entries with no data value (255)
						return {
										coordinates: [+d.Latitude, +d.Longitude], // convert to numbers
										value: +d.Value,
										satellite: d.Satellite.substring(0,3), //Parse satellite data
										date: new Date(+d.Satellite.substring(3,7),
																		+d.Satellite.substring(7,9)-1, //Month is 0 indexed
																		+d.Satellite.substring(9,11),
																		+d.Satellite.substring(11,13),
																		+d.Satellite.substring(13,15))
									};
								}, function(error, rows) {
									dataset.push(rows);	//Finished loading, push the rows onto the dataset
									callback(error, rows); //Tell the queue we've finished
					});
				}

				//Queue them up, loading each villages data in parallel
				for(var i = 0; i < villages.length; i++){
					q.defer(loadcsv, i);
				}

				//Drawing scatterplot points
				q.awaitAll(function(error, results) {
					console.log("Plotting points!");
					for(var i = 0; i < villages.length; i++){
						var index;
						for(var j = 0; j < villages.length; j++){
							if(coordinates[j][0] == dataset[i][0].coordinates[0]
							&& coordinates[j][1] == dataset[i][0].coordinates[1]){
								index = j;
							}
						}
					svg.selectAll("circle")
						.data(dataset[i])
						.enter()
						.append("circle")
						.attr("cx", function(d) {
								return xScale(d.date);
						})
						.attr("cy", function(d) {
								return yScale(d.value);
						})
						.attr("r", 2)
						.attr("fill", colors[i]);
					}
				});


				//Draw labels
				for(var i = 0; i < villages.length; i++){
					svg.append("text")
						.text(villages[i])
						.attr("x", w/15)
						.attr("y", (i+1)*h/4)
						.attr("fill", colors[i])
				}
				//Draw axises
				svg.append("g")
					.attr("class", "axis")
					.attr("transform", "translate(0," + h*(1-padding) + ")")
					.call(d3.svg.axis()
						.scale(xScale)
						.orient("bottom"));
				svg.append("g")
						.attr("class", "axis")
						.attr("transform", "translate(" + (2*w/15+w*padding) + ",0)")
						.call(d3.svg.axis()
                  .scale(yScale)
                  .orient("left")
                  .ticks(5));

		</script>
	</div>
{% endblock %}
